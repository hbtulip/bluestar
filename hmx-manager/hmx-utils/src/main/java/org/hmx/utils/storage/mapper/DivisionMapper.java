package org.hmx.utils.storage.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import org.hmx.utils.storage.domain.Division;
import org.hmx.utils.storage.domain.DivisionExample;

public interface DivisionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @SelectProvider(type=DivisionSqlProvider.class, method="countByExample")
    int countByExample(DivisionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @DeleteProvider(type=DivisionSqlProvider.class, method="deleteByExample")
    int deleteByExample(DivisionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @Delete({
        "delete from t_division",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @Insert({
        "insert into t_division (oilreg_id, store_id, ",
        "oiltank_id, oil_mass_litre, ",
        "oil_costtotal, total_amount, ",
        "total_count, total_litre, ",
        "status, div_amount, ",
        "div_count, div_litre, ",
        "div_starttime, trigger1_payment_id, ",
        "trigger1_divamount, div_endttime, ",
        "trigger2_payment_id, trigger2_divamount, ",
        "match_oiltype, oil_type_id, ",
        "rf_amount)",
        "values (#{oilregId,jdbcType=BIGINT}, #{storeId,jdbcType=BIGINT}, ",
        "#{oiltankId,jdbcType=BIGINT}, #{oilMassLitre,jdbcType=REAL}, ",
        "#{oilCosttotal,jdbcType=BIGINT}, #{totalAmount,jdbcType=BIGINT}, ",
        "#{totalCount,jdbcType=INTEGER}, #{totalLitre,jdbcType=REAL}, ",
        "#{status,jdbcType=INTEGER}, #{divAmount,jdbcType=BIGINT}, ",
        "#{divCount,jdbcType=INTEGER}, #{divLitre,jdbcType=REAL}, ",
        "#{divStarttime,jdbcType=TIMESTAMP}, #{trigger1PaymentId,jdbcType=BIGINT}, ",
        "#{trigger1Divamount,jdbcType=BIGINT}, #{divEndttime,jdbcType=TIMESTAMP}, ",
        "#{trigger2PaymentId,jdbcType=BIGINT}, #{trigger2Divamount,jdbcType=BIGINT}, ",
        "#{matchOiltype,jdbcType=INTEGER}, #{oilTypeId,jdbcType=BIGINT}, ",
        "#{rfAmount,jdbcType=BIGINT})"
    })
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insert(Division record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @InsertProvider(type=DivisionSqlProvider.class, method="insertSelective")
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insertSelective(Division record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @SelectProvider(type=DivisionSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="oilreg_id", property="oilregId", jdbcType=JdbcType.BIGINT),
        @Result(column="store_id", property="storeId", jdbcType=JdbcType.BIGINT),
        @Result(column="oiltank_id", property="oiltankId", jdbcType=JdbcType.BIGINT),
        @Result(column="oil_mass_litre", property="oilMassLitre", jdbcType=JdbcType.REAL),
        @Result(column="oil_costtotal", property="oilCosttotal", jdbcType=JdbcType.BIGINT),
        @Result(column="total_amount", property="totalAmount", jdbcType=JdbcType.BIGINT),
        @Result(column="total_count", property="totalCount", jdbcType=JdbcType.INTEGER),
        @Result(column="total_litre", property="totalLitre", jdbcType=JdbcType.REAL),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="div_amount", property="divAmount", jdbcType=JdbcType.BIGINT),
        @Result(column="div_count", property="divCount", jdbcType=JdbcType.INTEGER),
        @Result(column="div_litre", property="divLitre", jdbcType=JdbcType.REAL),
        @Result(column="div_starttime", property="divStarttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="trigger1_payment_id", property="trigger1PaymentId", jdbcType=JdbcType.BIGINT),
        @Result(column="trigger1_divamount", property="trigger1Divamount", jdbcType=JdbcType.BIGINT),
        @Result(column="div_endttime", property="divEndttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="trigger2_payment_id", property="trigger2PaymentId", jdbcType=JdbcType.BIGINT),
        @Result(column="trigger2_divamount", property="trigger2Divamount", jdbcType=JdbcType.BIGINT),
        @Result(column="match_oiltype", property="matchOiltype", jdbcType=JdbcType.INTEGER),
        @Result(column="oil_type_id", property="oilTypeId", jdbcType=JdbcType.BIGINT),
        @Result(column="rf_amount", property="rfAmount", jdbcType=JdbcType.BIGINT)
    })
    List<Division> selectByExample(DivisionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, oilreg_id, store_id, oiltank_id, oil_mass_litre, oil_costtotal, total_amount, ",
        "total_count, total_litre, status, div_amount, div_count, div_litre, div_starttime, ",
        "trigger1_payment_id, trigger1_divamount, div_endttime, trigger2_payment_id, ",
        "trigger2_divamount, match_oiltype, oil_type_id, rf_amount",
        "from t_division",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="oilreg_id", property="oilregId", jdbcType=JdbcType.BIGINT),
        @Result(column="store_id", property="storeId", jdbcType=JdbcType.BIGINT),
        @Result(column="oiltank_id", property="oiltankId", jdbcType=JdbcType.BIGINT),
        @Result(column="oil_mass_litre", property="oilMassLitre", jdbcType=JdbcType.REAL),
        @Result(column="oil_costtotal", property="oilCosttotal", jdbcType=JdbcType.BIGINT),
        @Result(column="total_amount", property="totalAmount", jdbcType=JdbcType.BIGINT),
        @Result(column="total_count", property="totalCount", jdbcType=JdbcType.INTEGER),
        @Result(column="total_litre", property="totalLitre", jdbcType=JdbcType.REAL),
        @Result(column="status", property="status", jdbcType=JdbcType.INTEGER),
        @Result(column="div_amount", property="divAmount", jdbcType=JdbcType.BIGINT),
        @Result(column="div_count", property="divCount", jdbcType=JdbcType.INTEGER),
        @Result(column="div_litre", property="divLitre", jdbcType=JdbcType.REAL),
        @Result(column="div_starttime", property="divStarttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="trigger1_payment_id", property="trigger1PaymentId", jdbcType=JdbcType.BIGINT),
        @Result(column="trigger1_divamount", property="trigger1Divamount", jdbcType=JdbcType.BIGINT),
        @Result(column="div_endttime", property="divEndttime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="trigger2_payment_id", property="trigger2PaymentId", jdbcType=JdbcType.BIGINT),
        @Result(column="trigger2_divamount", property="trigger2Divamount", jdbcType=JdbcType.BIGINT),
        @Result(column="match_oiltype", property="matchOiltype", jdbcType=JdbcType.INTEGER),
        @Result(column="oil_type_id", property="oilTypeId", jdbcType=JdbcType.BIGINT),
        @Result(column="rf_amount", property="rfAmount", jdbcType=JdbcType.BIGINT)
    })
    Division selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @UpdateProvider(type=DivisionSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Division record, @Param("example") DivisionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @UpdateProvider(type=DivisionSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") Division record, @Param("example") DivisionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @UpdateProvider(type=DivisionSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Division record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_division
     *
     * @mbggenerated
     */
    @Update({
        "update t_division",
        "set oilreg_id = #{oilregId,jdbcType=BIGINT},",
          "store_id = #{storeId,jdbcType=BIGINT},",
          "oiltank_id = #{oiltankId,jdbcType=BIGINT},",
          "oil_mass_litre = #{oilMassLitre,jdbcType=REAL},",
          "oil_costtotal = #{oilCosttotal,jdbcType=BIGINT},",
          "total_amount = #{totalAmount,jdbcType=BIGINT},",
          "total_count = #{totalCount,jdbcType=INTEGER},",
          "total_litre = #{totalLitre,jdbcType=REAL},",
          "status = #{status,jdbcType=INTEGER},",
          "div_amount = #{divAmount,jdbcType=BIGINT},",
          "div_count = #{divCount,jdbcType=INTEGER},",
          "div_litre = #{divLitre,jdbcType=REAL},",
          "div_starttime = #{divStarttime,jdbcType=TIMESTAMP},",
          "trigger1_payment_id = #{trigger1PaymentId,jdbcType=BIGINT},",
          "trigger1_divamount = #{trigger1Divamount,jdbcType=BIGINT},",
          "div_endttime = #{divEndttime,jdbcType=TIMESTAMP},",
          "trigger2_payment_id = #{trigger2PaymentId,jdbcType=BIGINT},",
          "trigger2_divamount = #{trigger2Divamount,jdbcType=BIGINT},",
          "match_oiltype = #{matchOiltype,jdbcType=INTEGER},",
          "oil_type_id = #{oilTypeId,jdbcType=BIGINT},",
          "rf_amount = #{rfAmount,jdbcType=BIGINT}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Division record);
}